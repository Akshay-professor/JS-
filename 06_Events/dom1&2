// Chapter 1: How to Access Things in JavaScript - Hinglish Guide

// 1. Accessing DOM Elements:
// JavaScript mein hum DOM (Document Object Model) se elements ko access karte hain jisse hum webpage ke content ko manipulate kar sakein.
// DOM se elements ko access karne ke liye different methods hote hain.

// 1.1. Accessing Elements using `getElementById()`:
// `getElementById()` method se hum ek specific element ko access karte hain uske id se.

// Example:
const element = document.getElementById('header');
element.innerText = 'Welcome to my website'; // Isse header ka text change ho jayega

// 1.2. Accessing Elements using `getElementsByClassName()`:
// Agar aapko same class waale multiple elements ko access karna ho toh `getElementsByClassName()` use karte hain.

// Example:
const elements = document.getElementsByClassName('card'); // Returns a live HTMLCollection
elements[0].style.backgroundColor = 'red'; // Pehle card ka background red ho jayega

// 1.3. Accessing Elements using `getElementsByTagName()`:
// `getElementsByTagName()` se hum specific tag type ke elements ko access karte hain.

// Example:
const paragraphs = document.getElementsByTagName('p'); // All <p> elements
paragraphs[1].style.fontSize = '20px'; // Second paragraph ka font size 20px ho jayega

// 1.4. Accessing Elements using `querySelector()`:
// `querySelector()` method se hum kisi bhi CSS selector ka use karke ek element ko access karte hain. Yeh first match return karta hai.

// Example:
const heading = document.querySelector('h1'); // First <h1> element
heading.style.color = 'blue'; // First <h1> ka text blue ho jayega

// 1.5. Accessing Elements using `querySelectorAll()`:
// `querySelectorAll()` method se hum sabhi elements ko access kar sakte hain jo ek particular selector se match karte hain. Yeh NodeList return karta hai.

// Example:
const buttons = document.querySelectorAll('.btn'); // All buttons with class 'btn'
buttons.forEach(button => {
    button.style.border = '2px solid green'; // Sabhi buttons ko green border mil jayega
});

// Caution: 
// - `getElementsByClassName()` aur `getElementsByTagName()` live collections return karte hain, which means agar aap DOM mein kuch changes karenge toh collection bhi update ho jayega.
// - `querySelector()` aur `querySelectorAll()` static NodeList return karte hain, jo updates ke baad bhi same rahenge. 

// Projects Example: 
// Yeh methods aapko ek e-commerce site mein use karne milenge, jahan aapko products list, buttons, aur headings ko dynamically access aur modify karna padta hai.

// 2. Accessing Attributes of an Element:

// 2.1. `getAttribute()` Method:
// Agar aapko kisi element ka attribute (jaise src, href, etc.) access karna ho toh aap `getAttribute()` ka use karte hain.

// Example:
const image = document.querySelector('img');
const src = image.getAttribute('src'); // Yeh image ka src attribute return karega
console.log(src); // Print karega image ka URL

// 2.2. `setAttribute()` Method:
// Agar aapko kisi element ka attribute set karna ho toh `setAttribute()` method use karte hain.

// Example:
image.setAttribute('alt', 'A beautiful image'); // Image ka alt attribute set kar diya

// 2.3. Accessing `classList` Property:
// Agar aapko ek element ke classes ko manipulate karna ho toh `classList` property ka use karte hain.

// Example:
const div = document.querySelector('.box');
div.classList.add('active'); // 'active' class add kar diya
div.classList.remove('inactive'); // 'inactive' class remove kar diya

// 3. Accessing and Manipulating Values:

// 3.1. Accessing the `value` Property of Form Elements:
// Agar aapko form elements jaise input, select, ya textarea ka value access karna ho toh aap unke `value` property ka use karte hain.

// Example:
const inputField = document.querySelector('#username');
const value = inputField.value; // Yeh username input field ka value return karega
console.log(value); // Print karega input field ka content

// 3.2. Setting the `value` Property of Form Elements:
// Agar aapko input field ka value set karna ho toh aap `value` property ko assign karte hain.

// Example:
inputField.value = 'New User'; // Input field mein 'New User' text set kar diya

// Projects Example: 
// Yeh features aapko forms, sign-up/login pages, aur search bars mein milenge.

// 4. Accessing Parent, Sibling, and Child Elements:

// 4.1. Accessing Parent Element using `parentElement`:
// Aap kisi bhi element ke parent ko `parentElement` property se access kar sakte hain.

// Example:
const child = document.querySelector('.child');
const parent = child.parentElement; // Yeh child element ka parent return karega
parent.style.backgroundColor = 'yellow'; // Parent element ka background color yellow ho jayega

// 4.2. Accessing Sibling Elements using `previousElementSibling` and `nextElementSibling`:
// Agar aapko kisi element ke sibling ko access karna ho toh `previousElementSibling` aur `nextElementSibling` ka use karte hain.

// Example:
const current = document.querySelector('.current');
const previous = current.previousElementSibling; // Previous sibling element
const next = current.nextElementSibling; // Next sibling element

previous.style.fontWeight = 'bold'; // Previous sibling ka font weight bold ho jayega
next.style.fontStyle = 'italic'; // Next sibling ka font style italic ho jayega

// 4.3. Accessing Child Elements using `children` Property:
// Agar aapko kisi element ke saare child elements ko access karna ho toh aap `children` property ka use karte hain.

// Example:
const container = document.querySelector('.container');
const children = container.children; // Container ke sare child elements
children[0].style.color = 'green'; // Pehle child element ka color green ho jayega

// Projects Example:
// Yeh concepts aapko galleries, dropdown menus, aur nested lists mein kaafi useful milenge.

// 5. Event Handling for Elements:

// 5.1. Accessing Event Target using `event.target`:
// Jab event trigger hota hai, toh `event.target` se hum woh element access kar sakte hain jisme event trigger hua.

// Example:
document.querySelector('.parent').addEventListener('click', function(event) {
    console.log(event.target); // Jo element click hua, woh print ho jayega
});

// 5.2. Using `addEventListener()` to Add Events:
// Hum `addEventListener()` method se elements par events attach karte hain. Ye method events ko dynamically add karne ka best way hai.

// Example:
const button = document.querySelector('#myButton');
button.addEventListener('click', function() {
    alert('Button clicked!');
});

// 5.3. Removing Event Listeners using `removeEventListener()`:
// Agar humko event listener ko hataana ho toh `removeEventListener()` ka use karte hain.

// Example:
const handleClick = function() {
    alert('This is a click event');
};
button.addEventListener('click', handleClick);
button.removeEventListener('click', handleClick); // Yeh listener ko remove kar dega

// 6. Working with Collections of Elements:

// 6.1. Using `forEach()` with `querySelectorAll()`:
// Jab hum multiple elements ko access karte hain using `querySelectorAll()`, toh hum `forEach()` loop ka use karte hain unpe actions apply karne ke liye.

// Example:
const buttons = document.querySelectorAll('button');
buttons.forEach(function(button) {
    button.addEventListener('click', function() {
        alert('Button clicked: ' + button.textContent);
    });
});

// 6.2. Using `for` Loop with `getElementsByClassName()`:
// Hum `getElementsByClassName()` ka result ek live HTMLCollection milta hai, jisme `for` loop ka use karte hain.

const items = document.getElementsByClassName('list-item');
for (let i = 0; i < items.length; i++) {
    items[i].style.color = 'red'; // Sabhi list items ka color red ho jayega
}

// Conclusion:
// In JavaScript, DOM elements ko access karna aur manipulate karna ek important skill hai. Yeh concepts aapko web development projects mein kaafi help karenge.
// DOM manipulation ka use karke hum webpages ko interactive bana sakte hain aur user-friendly experiences create kar sakte hain.

// Chapter 2: Advanced Techniques for Accessing and Manipulating Elements - Hinglish Guide

// 7. Modifying Style Properties:

// 7.1. Using `style` Property to Modify Inline Styles:
// `style` property se hum element ki inline CSS styles ko directly modify karte hain.

// Example:
const div = document.querySelector('.box');
div.style.backgroundColor = 'yellow'; // Element ka background color yellow ho jayega
div.style.width = '300px'; // Element ki width 300px ho jayegi
div.style.height = '200px'; // Element ki height 200px ho jayegi

// Caution: Yeh changes sirf inline styles par lagte hain. Agar style CSS file mein define ho, toh woh override ho jayenge.

// 7.2. Adding CSS Class Dynamically using `classList`:
// Agar aapko kisi element ko dynamic tarike se style karna ho, toh aap class ko `classList.add()` method se add kar sakte hain.

// Example:
const box = document.querySelector('.box');
box.classList.add('highlight'); // highlight class add kar diya box mein

// 7.3. Removing CSS Class Dynamically using `classList`:
// Agar aapko kisi class ko remove karna ho toh `classList.remove()` ka use karte hain.

// Example:
box.classList.remove('highlight'); // highlight class remove kar diya

// 7.4. Toggling a Class using `classList.toggle()`:
// Agar aap chahte hain ki class add ho aur na ho toh `toggle()` method ka use karte hain. Yeh method class ko add ya remove karne ka kaam karta hai.

// Example:
const toggleButton = document.querySelector('.toggle-btn');
toggleButton.addEventListener('click', function() {
    box.classList.toggle('highlight'); // Box ka style toggle hota rahega
});

// Projects Example:
// Yeh techniques aapko interactive UIs banane mein help karein gi, jaise modals, dropdowns, light/dark themes, etc.

// 8. Modifying Attributes Dynamically:

// 8.1. Setting the `src` Attribute for Images Dynamically:
// Image sources ko dynamically change karne ke liye aap `setAttribute()` method ka use kar sakte hain.

// Example:
const image = document.querySelector('#dynamic-image');
image.setAttribute('src', 'new-image.jpg'); // Image ka source change ho jayega

// 8.2. Changing the `href` Attribute of Links Dynamically:
// Links ke `href` attribute ko bhi dynamically change kiya ja sakta hai.

// Example:
const link = document.querySelector('#dynamic-link');
link.setAttribute('href', 'https://newwebsite.com'); // Link ka URL change ho jayega

// Projects Example:
// Yeh techniques aapko dynamic image sliders, personalized links, aur media galleries mein kaam aayenge.

// 9. Traversing Through DOM Tree:

// 9.1. Traversing to Parent Element using `parentNode`:
// Aap kisi element ke parent ko `parentNode` se access kar sakte hain.

// Example:
const childElement = document.querySelector('.child');
const parentElement = childElement.parentNode; // Yeh child ka parent element return karega
parentElement.style.backgroundColor = 'gray'; // Parent ka background color gray ho jayega

// 9.2. Traversing to Previous Sibling using `previousSibling`:
// Aap previous sibling ko `previousSibling` property se access kar sakte hain.

// Example:
const currentElement = document.querySelector('.current');
const previousElement = currentElement.previousSibling; // Previous sibling element
previousElement.style.fontStyle = 'italic'; // Previous sibling ka font style italic ho jayega

// 9.3. Traversing to Next Sibling using `nextSibling`:
// Aap next sibling ko `nextSibling` property se access kar sakte hain.

// Example:
const currentElem = document.querySelector('.current');
const nextElem = currentElem.nextSibling; // Next sibling element
nextElem.style.fontSize = '20px'; // Next sibling ka font size 20px ho jayega

// 9.4. Accessing Children Using `children` Property:
// Agar aapko kisi element ke child elements ko access karna ho toh `children` property ka use karte hain.

// Example:
const container = document.querySelector('.container');
const children = container.children; // Yeh container ke child elements ko return karega
children[0].style.color = 'green'; // Pehle child ka color green ho jayega

// Projects Example:
// Yeh concept aapko nested structures, like nested lists or hierarchical menus, mein use karne milenge.

// 10. Advanced Event Handling:

// 10.1. Event Delegation:
// Event delegation ek technique hai jisme hum ek parent element ko event listener attach karte hain, aur uske child elements par events handle karte hain. Yeh performance ke liye best hota hai jab aapko dynamically added elements ke liye events handle karne ho.

// Example:
document.querySelector('.list').addEventListener('click', function(event) {
    if (event.target && event.target.matches('li')) {
        alert('List item clicked: ' + event.target.textContent); // Jo li element click hoga, uska text print hoga
    }
});

// 10.2. Using `event.preventDefault()` to Prevent Default Action:
// Agar aapko kisi action ko prevent karna ho, jaise link ka default behavior (open karna), toh aap `preventDefault()` method use karte hain.

// Example:
const form = document.querySelector('form');
form.addEventListener('submit', function(event) {
    event.preventDefault(); // Form submission ko rok diya
    alert('Form submission prevented');
});

// 10.3. Using `event.stopPropagation()` to Stop Event Bubbling:
// Agar aapko event bubbling ko rokna ho, toh `stopPropagation()` ka use karte hain. Yeh event ko parent elements tak propagate nahi hone deta.

// Example:
const button = document.querySelector('.btn');
button.addEventListener('click', function(event) {
    event.stopPropagation(); // Event propagation rok diya
    alert('Button clicked, but no event will bubble up');
});

// Projects Example:
// Yeh event handling techniques aapko complex web applications mein milenge jahan dynamic elements aur event management ki zarurat hoti hai.

// 11. Working with Forms:

// 11.1. Accessing Form Elements using `elements` Property:
// Agar aapko form ke sabhi elements ko access karna ho, toh aap `elements` property ka use karte hain.

// Example:
const form = document.querySelector('form');
const formElements = form.elements; // Yeh form ke sare input elements ko return karega
formElements['username'].value = 'New User'; // Username input field ka value set kar diya

// 11.2. Validating Form Elements:
// Form validation karne ke liye hum form elements ki properties jaise `validity` check karte hain.

// Example:
const inputField = document.querySelector('#email');
if (!inputField.validity.valid) {
    alert('Please enter a valid email address');
}

// 11.3. Submitting Forms Programmatically:
// Agar aapko form ko JavaScript se submit karna ho, toh `submit()` method ka use karte hain.

// Example:
const formSubmitButton = document.querySelector('#submit');
formSubmitButton.addEventListener('click', function(event) {
    event.preventDefault(); // Prevent the default submission
    form.submit(); // Programmatically submit the form
});

// Projects Example:
// Yeh techniques aapko forms, surveys, login pages, aur complex form-based applications mein use karne milenge.

// Conclusion:
// Yeh second part aapko aur zyada advanced techniques samjhaata hai jo aapko DOM manipulation aur event handling mein mastery denge. In techniques ka use karke aap complex web pages bana sakte hain jo dynamic, interactive, aur responsive hote hain.

// Key Takeaways:
// - Inline styles aur classes ko dynamically modify karna.
# - Attributes ko change karna jaise `src`, `href`, etc.
# - Parent-child aur sibling relationships ko traverse karna.
# - Event delegation aur performance optimizations.
# - Form handling aur validation.

// Chapter 3: Advanced DOM Manipulation and Animation Techniques - Hinglish Guide

// 12. Working with Animations:

// 12.1. CSS Transitions for Smooth Animations:
// CSS transitions allow us to smoothly animate changes in properties. JavaScript can dynamically trigger these transitions.

// Example:
const box = document.querySelector('.box');
box.addEventListener('click', function() {
    // On click, change the size and transition smoothly
    box.style.transition = 'all 0.5s ease';
    box.style.width = '300px';
    box.style.height = '300px';
    box.style.backgroundColor = 'blue';
});

// Caution: Make sure to define the transition duration and property for a smooth effect.

// 12.2. CSS Animations with `@keyframes`:
// `@keyframes` CSS rule allows creating complex animations, and JavaScript can control it by adding/removing classes.

// Example:
const animatedBox = document.querySelector('.animated-box');
animatedBox.addEventListener('click', function() {
    animatedBox.classList.add('animate'); // Add class to start animation
});

// CSS part:
// .animate {
//     animation: bounce 2s ease-in-out infinite;
// }
// @keyframes bounce {
//     0% { transform: translateY(0); }
//     50% { transform: translateY(-50px); }
//     100% { transform: translateY(0); }
// }

// Projects Example:
// Yeh animation techniques aapko product showcases, interactive buttons, aur modal windows banane mein madad karenge.

// 13. Working with `setInterval()` and `setTimeout()`:

// 13.1. Using `setInterval()` to Repeatedly Execute Code:
// `setInterval()` method allows us to run a piece of code repeatedly at a fixed interval.

// Example:
let counter = 0;
const counterElement = document.querySelector('.counter');
const interval = setInterval(function() {
    counter++;
    counterElement.innerText = counter;
    if (counter === 10) {
        clearInterval(interval); // Stop the interval after counter reaches 10
    }
}, 1000); // 1000ms = 1 second

// Caution: Always use `clearInterval()` to stop repeated actions when needed to avoid memory leaks.

// 13.2. Using `setTimeout()` to Execute Code After Delay:
// `setTimeout()` method executes code after a certain delay.

// Example:
const timeoutMessage = document.querySelector('.timeout-message');
setTimeout(function() {
    timeoutMessage.innerText = 'This message appears after 3 seconds';
}, 3000); // 3000ms = 3 seconds delay

// Projects Example:
// Yeh methods aapko countdown timers, delayed actions, aur animations ke liye use karne milenge.

// 14. Fetching Data from External Sources:

// 14.1. Fetch API for Asynchronous Requests:
// `fetch()` method asynchronous requests bhejne ke liye use hota hai, aur data ko promise ke form mein return karta hai.

// Example:
const fetchButton = document.querySelector('.fetch-button');
fetchButton.addEventListener('click', function() {
    fetch('https://jsonplaceholder.typicode.com/posts') // API endpoint
        .then(response => response.json()) // Convert response to JSON
        .then(data => {
            const post = data[0]; // First post data
            console.log(post.title); // Log title of the first post
        })
        .catch(error => console.log('Error:', error)); // Handle error
});

// Caution: Always handle errors when using `fetch()` to avoid unhandled promise rejections.

// 14.2. Handling JSON Data:
const jsonData = '{"name": "John", "age": 30}';
const obj = JSON.parse(jsonData); // Parse the JSON string to an object
console.log(obj.name); // Output: John

// Projects Example:
// Fetching external APIs, creating dynamic data-driven content, and populating UI with data from APIs.

// 15. Working with Local Storage and Session Storage:

// 15.1. Using Local Storage to Store Data:
// Local Storage ka use karke aap data ko client side par permanently store kar sakte hain, even after page reload.

// Example:
const saveButton = document.querySelector('.save-button');
saveButton.addEventListener('click', function() {
    const userName = document.querySelector('.username-input').value;
    localStorage.setItem('username', userName); // Store the username in localStorage
});

// 15.2. Retrieving Data from Local Storage:
const retrieveButton = document.querySelector('.retrieve-button');
retrieveButton.addEventListener('click', function() {
    const storedUserName = localStorage.getItem('username'); // Retrieve username from localStorage
    if (storedUserName) {
        alert(`Stored username: ${storedUserName}`);
    } else {
        alert('No username found');
    }
});

// 15.3. Using Session Storage to Store Data for a Session:
// Session Storage ka use karke aap data ko sirf current session ke liye store kar sakte hain. Jab browser close hota hai, data delete ho jata hai.

// Example:
sessionStorage.setItem('sessionData', 'This is session data'); // Store session data
console.log(sessionStorage.getItem('sessionData')); // Retrieve session data

// Projects Example:
// Yeh storage methods aapko user preferences, session-based data, aur offline caching ke liye use karne milenge.

// 16. DOM Manipulation for Creating Dynamic Content:

// 16.1. Creating New Elements with `createElement()`:
// Aap `createElement()` method ka use karke new elements dynamically create kar sakte hain.

// Example:
const newDiv = document.createElement('div');
newDiv.classList.add('new-element');
newDiv.innerHTML = '<h2>This is a new dynamic element!</h2>';
document.body.appendChild(newDiv); // Add new element to the DOM

// 16.2. Removing Elements with `remove()`:
// Agar aapko kisi element ko DOM se remove karna ho toh `remove()` method ka use karte hain.

// Example:
const removeButton = document.querySelector('.remove-button');
removeButton.addEventListener('click', function() {
    newDiv.remove(); // This will remove the dynamically added div
});

// 16.3. Updating Existing Elements:
// Aap existing elements ko bhi update kar sakte hain, jaise unka inner content or style.

// Example:
const updateButton = document.querySelector('.update-button');
updateButton.addEventListener('click', function() {
    const existingElement = document.querySelector('.existing-element');
    existingElement.innerHTML = '<h2>Updated Content</h2>'; // Update inner content
    existingElement.style.backgroundColor = 'lightgreen'; // Update background color
});

// Projects Example:
// Yeh techniques aapko dynamically generating lists, galleries, or adding content in response to user actions mein madad karenge.

// 17. Using `querySelectorAll()` for Multiple Element Selection:

// 17.1. Selecting Multiple Elements:
// `querySelectorAll()` method se aap ek saath multiple elements ko select kar sakte hain jo CSS selectors se match karte hain.

// Example:
const allLinks = document.querySelectorAll('a');
allLinks.forEach(link => {
    link.style.color = 'green'; // All links will have green color
});

// 17.2. Adding Event Listeners to Multiple Elements:
// Aap `querySelectorAll()` se multiple elements select karke un par event listeners add kar sakte hain.

// Example:
const allButtons = document.querySelectorAll('.btn');
allButtons.forEach(button => {
    button.addEventListener('click', function() {
        alert('Button clicked!');
    });
});

// Projects Example:
// Yeh techniques aapko navigation menus, button clicks, aur interactive UI components mein use karne milenge.

// Conclusion:
// Part 3 mein humne advanced techniques cover ki hain, jaise animations, asynchronous data fetching, local/session storage, aur dynamic content creation. Yeh techniques aapko complex web applications mein use karne milenge, jahan user interactions aur real-time data fetch karna hota hai.

// Key Takeaways:
// - Animations with CSS transitions and keyframes.
// - Repeated tasks with `setInterval()` and delayed tasks with `setTimeout()`.
// - Fetching data from external APIs using `fetch()`.
// - Storing data on the client-side with Local Storage and Session Storage.
// - Dynamically adding, updating, and removing DOM elements.
