// Chapter: Understanding APIs and Using `fetch()` in JavaScript - Hinglish Guide

// 1. Introduction to APIs:

// API ka full form hai "Application Programming Interface". APIs ek set of rules hoti hain, jo ek software component ko doosre component ke saath interact karne ki permission deti hai. 

// APIs ka use karke hum apne application ko external data, services ya functionality se connect kar sakte hain. Jaise ke weather data fetch karna, payment gateway integrate karna, ya kisi third-party service se data lena.

// API ko call karne ke liye hum HTTP methods ka use karte hain: GET, POST, PUT, DELETE.


// 2. Fetch API Overview:

// 2.1. What is the Fetch API?
// `fetch()` ek built-in method hai JavaScript mein jo HTTP requests bhejne ke liye use hoti hai. Yeh promise-based hota hai, jo asynchronous nature ka support karta hai. 

// `fetch()` se hum data ko retrieve kar sakte hain aur API ke saath interact kar sakte hain.


// 3. Basic Syntax of Fetch API:

// 3.1. Basic GET Request:

// `fetch()` ek URL ko pass karta hai, jo API endpoint hai. By default, `fetch()` ek GET request bhejta hai jo data retrieve karne ke liye use hoti hai.

fetch('https://jsonplaceholder.typicode.com/posts') // API endpoint
    .then(response => response.json()) // Convert the response to JSON
    .then(data => {
        console.log(data); // Process the JSON data
    })
    .catch(error => {
        console.log('Error:', error); // Handle any errors
    });


// Explanation:
// - `fetch()` method ko URL pass kiya gaya hai.
// - `.then()` ke andar response ko `.json()` method se JSON format mein convert kiya gaya hai.
// - `.catch()` method se agar koi error aata hai toh usko handle kiya jata hai.


// 3.2. POST Request:

// Agar humein data send karna ho kisi API ko, toh hum POST request ka use karte hain. Hum `fetch()` ko method `POST` ke saath use karte hain aur data ko request body mein send karte hain.

fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        title: 'New Post',
        body: 'This is a new post.',
        userId: 1
    })
})
    .then(response => response.json()) // Convert the response to JSON
    .then(data => {
        console.log('Posted Data:', data); // Show the posted data
    })
    .catch(error => {
        console.log('Error:', error); // Handle errors
    });


// Explanation:
// - `method: 'POST'` se hum POST request bhej rahe hain.
// - `headers` ke andar humne `Content-Type: application/json` set kiya, jo batata hai ki data JSON format mein bheja ja raha hai.
// - `body: JSON.stringify({...})` se hum JSON data ko string mein convert kar rahe hain, jo API request body ke liye required hai.


// 4. Handling API Responses:

// 4.1. Understanding Response Status Codes:
// API responses ko handle karte waqt, aapko response status code samajhna zaroori hota hai. Yeh indicate karta hai ki request successful thi ya nahi.

fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => {
        if (response.ok) { // Check if status is 200-299 range
            return response.json(); // Convert to JSON
        } else {
            throw new Error('Something went wrong!'); // Throw error if response not ok
        }
    })
    .then(data => {
        console.log(data); // Process data if the request was successful
    })
    .catch(error => {
        console.log('Error:', error); // Handle errors
    });


// Common Status Codes:
// 200: OK, 201: Created, 400: Bad Request, 404: Not Found, 500: Server Error


// 5. Parsing and Handling JSON:

// 5.1. Handling JSON Data:
// Jab `fetch()` API se response aata hai, toh wo ek response object hota hai. Agar response JSON data hai, toh usse `.json()` method ke through JavaScript object mein convert karte hain.

fetch('https://jsonplaceholder.typicode.com/posts/1')
    .then(response => response.json()) // Parse JSON data
    .then(post => {
        console.log(post.title); // Access individual fields from the JSON object
    })
    .catch(error => {
        console.log('Error:', error); // Handle errors
    });


// 6. Error Handling in Fetch API:

// 6.1. Try-Catch Blocks for Fetch Error Handling:
// `fetch()` asynchronous operation hai, isliye aapko error handling carefully karni chahiye. `catch()` method ka use karke hum errors ko handle karte hain.

fetch('https://jsonplaceholder.typicode.com/nonexistent-endpoint')
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch data!');
        }
        return response.json(); // If response is ok, parse JSON
    })
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.log('Error:', error.message); // Log the error message
    });


// Caution:
// - Agar request failed ho jaati hai (for example, 404 ya 500 status code), toh aapko handle karna zaroori hai. 
// - `catch()` block mein error ko handle karke aap user ko friendly message de sakte hain.


// 7. Async-Await with Fetch:

// 7.1. Using Async-Await for Cleaner Code:
// `async/await` syntax fetch API ko synchronous tarike se handle karne mein madad karta hai. Yeh code ko readable aur easy to manage banata hai.

async function fetchPosts() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts');
        if (!response.ok) throw new Error('Failed to fetch posts');
        const data = await response.json(); // Await response to be converted to JSON
        console.log(data);
    } catch (error) {
        console.log('Error:', error.message); // Handle errors
    }
}

fetchPosts(); // Call the async function

// Explanation:
// - `await` ka use fetch API se response ko handle karne ke liye hota hai.
// - `async` function ke andar hum `await` ka use kar sakte hain. Yeh promise ko resolve karne tak wait karega.


// 8. Fetching Data for User Interfaces:

// 8.1. Populating a List from API Data:

// Aap fetched data ko HTML elements mein dynamically display kar sakte hain.

fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(posts => {
        const postsList = document.querySelector('.posts-list');
        posts.forEach(post => {
            const listItem = document.createElement('li');
            listItem.textContent = post.title; // Use title from each post
            postsList.appendChild(listItem); // Add list item to the DOM
        });
    })
    .catch(error => {
        console.log('Error:', error);
    });


// 9. CORS (Cross-Origin Resource Sharing):

// 9.1. Understanding CORS:
fetch('https://anotherwebsite.com/api/data')
    .then(response => response.json())
    .then(data => {
        console.log(data);
    })
    .catch(error => {
        console.log('Error:', error); // If there is a CORS issue
    });

// Caution:
// Agar aap cross-origin request karte hain (jaise kisi dusre domain se data fetch karte hain), toh server ko CORS (Cross-Origin Resource Sharing) ko enable karna padta hai.
// Agar server CORS allow nahi karta hai, toh aapko error milega.


// 10. Conclusion:

// 10.1. Key Takeaways:

// - Fetch API is a promise-based approach for handling HTTP requests.
// - Use `GET` to fetch data and `POST` to send data.
// - Handle errors gracefully using `catch()` or `try-catch` blocks.
// - You can use `async/await` to make code more readable and synchronous-like.
// - Fetch API is useful for populating dynamic content, submitting forms, and interacting with external services.


// 10.2. Projects Example:
// - Aap is API knowledge ko blog posts, product listings, or user comments list display karne ke liye use kar sakte hain.
// - Form submission aur user input ko handle karne ke liye POST request use kar sakte hain.

